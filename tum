#!/usr/bin/env bash
#
# `tum`
# 
# A universal utility for UNIX-like operating systems created by Archetypum,
# designed to simplify interactions with UNIX-like operating systems and
# streamline the development of system-related bash/shell scripts.
#
# Copyright (C) 2025 Archetypum
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>

readonly LC_ALL="C"
readonly LANG="C"
readonly VERSION="2.2.4-stable"
readonly SUPPORTED_PMS="
apt apt-get apt-cache apt-cdrom apt-config apt-extracttemplates apt-listchanges apt-mark apt-sortpkgs 
aptitude aptitude-create-state-bundle aptitude-run-state-bundle apk dnf dpkg guix homebrew pkg pkgin
pkg_add pkg_delete pkg_create pkg_info pacman yay pamac trizen portage qi slackpkg xbps-install xbps-remove
xbps-query yum zypper zypper-log"
readonly SUPPORTED_INITS="sysvinit openrc s6 runit systemd dinit launchd"

get_distro()
{
    strip_name()
    {
        name="$1"
        name="${name#\"}"
        name="${name%\"}"
        name="${name#\'}"
        name="${name%\'}"
        printf "$name"
    }

    os=$(uname -s)
    case "$os" in
        "Linux")
            if has lsb_release; then
                raw=$(lsb_release -sd)
                distro=$(strip_name "$raw")
            fi

            [ -d /system/app ] && [ -d /system/priv-app ] && {
                distro="Android";
            }

            [ -f /etc/os-release ] && {
                while IFS="=" read -r key val; do
                    [ "$key" = "PRETTY_NAME" ] && {
                        distro=$(strip_name "$val");
                        break;
                    }
                done < /etc/os-release
            }
            ;;
        "Darwin")
            product_name=$(defaults read /System/Library/CoreServices/SystemVersion ProductName 2>/dev/null)
            case "$product_name" in
                *iPhone* | *iPad* | *iOS*)
                    distro="iOS"
                    ;;
                *)
                    distro="macOS"
                    ;;
            esac
            ;;
        "Haiku" | "Minix" | "FreeBSD" | "OpenBSD" | "NetBSD" | "DragonFly")
            distro="$os"
            ;;
    esac

    [ -z "$distro" ] && {
        printf "[!] Error: cannot detect your distribution.\n";
        printf "[==>] Enter your OS: "; read -r distro;
    }

    printf "$distro\n"
}

get_init()
{
    init_comm=$(get_pid_comm 1)

    [ "$init_comm" = "systemd" ] && {
        printf "systemd\n";
        return;
    }
    
    [ -d "/etc/rc.d" ] && {
        printf "rc\n";
        return;
    }

    [ "$init_comm" = "init" ] && { 
        [ -e "/sbin/openrc" ] && {
            printf "openrc\n";
            return;
        } || { 
            printf "sysvinit\n";
            return;
        };
    }

    [ "$init_comm" = "s6-svscan" ] && { 
        printf "s6\n";
        return;
    }

    [ "$init_comm" = "runit" ] && { 
        printf "runit\n";
        return;
    }

    [ "$init_comm" = "dinit" ] && {
        printf "dinit\n"; 
        return;
    }
    
    [ "$init_comm" = "shepherd" ] && {
        printf "shepherd\n";
        return;
    }

    [ "$init_comm" = "launchd" ] && {
        printf "launchd\n";
        return;
    }
    
    printf "unknown\n"
    return 
}

get_pid_comm()
{
    comm=$(ps -p $1 -o comm= 2>/dev/null)
    printf "$comm\n"
}

get_package_manager()
{
    for manager in $SUPPORTED_PMS; do
        if has "$manager"; then
            printf "$manager\n"
            return 0
        fi
    done

    printf "unknown\n"
    return 1
}

prompt_user()
{
    prompt="$1"
    default="${2:-N}"
    default="$(printf "$default" | tr '[:upper:]' '[:lower:]')"

    printf "$prompt (y/n) [$default]: "; read user_input
    user_input="$(printf "$user_input" | tr '[:upper:]' '[:lower:]' | xargs)"

    [ -z "$user_input" ] && user_input="$default"
    case "$user_input" in
        "y" | "ye" | "yes")
            return 0
            ;;
        "n" | "no")
            return 1
            ;;
        *)
            return 1
            ;;
    esac
}

check_privileges()
{
    [ "$EUID" -ne 0 ] && { 
        printf "[*] Not running as root.\n"; 
        return 1;
    } || {
        printf "[*] Running as root.\n";
        return 0;
    }
}

has()
{
    type -P "$1" >/dev/null 2>&1
}

_run_dinitctl()
{
    action="$1"
    service="$2"

    dinitctl "$action" "$service" >/dev/null 2>&1 && {
        printf "[*] Success!\n";
        return 0;
    } || {
        printf "[!] Error: 'dinitctl $action $service' failed.\n";
        return 1;
    }
}

start_dinitctl()      { _run_dinitctl "start"      "$1"; }
stop_dinitctl()       { _run_dinitctl "stop"       "$1"; }
status_dinitctl()     { _run_dinitctl "status"     "$1"; }
is_started_dinitctl() { _run_dinitctl "is-started" "$1"; }
is_failed_dinitctl()  { _run_dinitctl "is-failed"  "$1"; }
restart_dinitctl()    { _run_dinitctl "restart"    "$1"; }
wake_dinitctl()       { _run_dinitctl "wake"       "$1"; }
release_dinitctl()    { _run_dinitctl "release"    "$1"; }
unpin_dinitctl()      { _run_dinitctl "unpin"      "$1"; }
unload_dinitctl()     { _run_dinitctl "unload"     "$1"; }
reload_dinitctl()     { _run_dinitctl "reload"     "$1"; }
list_dinitctl()       { _run_dinitctl "list"       "$1"; }
shutdown_dinitctl()   { _run_dinitctl "shutdown"   "$1"; }
add_dep_dinitctl()    { _run_dinitctl "add-dep"    "$1"; }
rm_dep_dinitctl()     { _run_dinitctl "rm-dep"     "$1"; }
enable_dinitctl()     { _run_dinitctl "enable"     "$1"; }
disable_dinitctl()    { _run_dinitctl "disable"    "$1"; }
trigger_dinitctl()    { _run_dinitctl "trigger"    "$1"; }
untrigger_dinitctl()  { _run_dinitctl "untrigger"  "$1"; }
setenv_dinitctl()     { _run_dinitctl "setenv"     "$1"; }
unsetenv_dinitctl()   { _run_dinitctl "unsetenv"   "$1"; }
catalog_dinitctl()    { _run_dinitctl "catalog"    "$1"; }
signal_dinitctl()     { _run_dinitctl "signal"     "$1"; }

execute_dinitctl()
{
    command="$1"
    service="$2"

    case "$command" in
        "start" | "stop" | "status" | "is-started" | "is-failed" | "restart" | "wake" | "release" | \
        "unpin" | "unload" | "reload" | "list" | "shutdown" | "add-dep" | "rm-dep" | "enable" | "disable" | \
        "trigger" | "untrigger" | "setenv" | "unsetenv" | "catalog" | "signal")
            ;;
        *)
            printf "[!] Error: Unsupported command: '$command'.\n"
            return 1
            ;;
    esac

    func_name="${command//-/_}_dinitctl"
    "$func_name" "$service"
}

_run_launchctl()
{
    action="$1"
    service="$2"

    launchctl "$action" "$service" >/dev/null 2>&1 && {
        printf "[*] Success!\n";
        return 0;
    } || {
        printf "[!] Error: 'launchctl $action $service' failed.\n"; 
        return 1;
    }
}

bootstrap_launchctl()      { _run_launchctl "bootstrap"      "$1"; }
bootout_launchctl()        { _run_launchctl "bootout"        "$1"; }
enable_launchctl()         { _run_launchctl "enable"         "$1"; }
disable_launchctl()        { _run_launchctl "disable"        "$1"; }
uncache_launchctl()        { _run_launchctl "uncache"        "$1"; }
kickstart_launchctl()      { _run_launchctl "kickstart"      "$1"; }
attach_launchctl()         { _run_launchctl "attach"         "$1"; }
debug_launchctl()          { _run_launchctl "debug"          "$1"; }
kill_launchctl()           { _run_launchctl "kill"           "$1"; }
blame_launchctl()          { _run_launchctl "blame"          "$1"; }
print_launchctl()          { _run_launchctl "print"          "$1"; }
print_cache_launchctl()    { _run_launchctl "print-cache"    "$1"; }
print_disabled_launchctl() { _run_launchctl "print-disabled" "$1"; }
plist_launchctl()          { _run_launchctl "plist"          "$1"; }
procinfo_launchctl()       { _run_launchctl "procinfo"       "$1"; }
hostinfo_launchctl()       { _run_launchctl "hostinfo"       "$1"; }
resolveport_launchctl()    { _run_launchctl "resolveport"    "$1"; }
examine_launchctl()        { _run_launchctl "examine"        "$1"; }
reboot_launchctl()         { _run_launchctl "reboot"         "$1"; }
error_launchctl()          { _run_launchctl "error"          "$1"; }
variant_launchctl()        { _run_launchctl "variant"        "$1"; }
version_launchctl()        { _run_launchctl "version"        "$1"; }
load_launchctl()           { _run_launchctl "load"           "$1"; }
unload_launchctl()         { _run_launchctl "unload"         "$1"; }
submit_launchctl()         { _run_launchctl "submit"         "$1"; }
remove_launchctl()         { _run_launchctl "remove"         "$1"; }
start_launchctl()          { _run_launchctl "start"          "$1"; }
stop_launchctl()           { _run_launchctl "stop"           "$1"; }
list_launchctl()           { _run_launchctl "list"           "$1"; }
setenv_launchctl()         { _run_launchctl "setenv"         "$1"; }
unsetenv_launchctl()       { _run_launchctl "unsetenv"       "$1"; }
getenv_launchctl()         { _run_launchctl "getenv"         "$1"; }
export_launchctl()         { _run_launchctl "export"         "$1"; }
limit_launchctl()          { _run_launchctl "limit"          "$1"; }
bsexec_launchctl()         { _run_launchctl "bsexec"         "$1"; }
asuser_launchctl()         { _run_launchctl "asuser"         "$1"; }
managerpid_launchctl()     { _run_launchctl "managerpid"     "$1"; }
manageruid_launchctl()     { _run_launchctl "manageruid"     "$1"; }
managername_launchctl()    { _run_launchctl "managername"    "$1"; }
help_launchctl()           { _run_launchctl "help"           "$1"; }

execute_launchctl()
{
    command="$1"
    service="$2"

    case "$command" in
        "bootstrap" | "bootout" | "enable" | "disable" | "uncache" | "kickstart" | "attach" | "debug" | \
        "kill" | "blame" | "print" | "print-cache" | "print-disabled" | "plist" | "procinfo" | "hostinfo" | \
        "resolveport" | "examine" | "reboot" | "error" | "variant" | "version" | "load" | "unload" | "submit" | \
        "remove" | "start" | "stop" | "list" | "setenv" | "unsetenv" | "getenv" | "export" | "limit" | "bsexec" | \
        "asuser" | "managerpid" | "manageruid" | "managername" | "help")
        	;;
        *)
            printf "[!] Error: Unsupported command: '$command'."
            return 1
            ;;
    esac

    func_name="${command//-/_}_launchctl"
    "$func_name" "$service"
}

_run_rc_service()
{
    action="$1"
    service="$2"

    rc-service "$service" "$action" >/dev/null 2>&1 && {
        printf "[*] Success!\n";
        return 0;
    } || {
        printf "[!] Error: 'rc-service $service $action' failed.\n";
        return 1;
    }
}

start_rc_service()        { _run_rc_service "start"        "$1"; }
stop_rc_service()         { _run_rc_service "stop"         "$1"; }
reload_rc_service()       { _run_rc_service "reload"       "$1"; }
force_reload_rc_service() { _run_rc_service "force-reload" "$1"; }
restart_rc_service()      { _run_rc_service "restart"      "$1"; }
try_restart_rc_service()  { _run_rc_service "try-restart"  "$1"; }
status_rc_service()       { _run_rc_service "status"       "$1"; }

execute_rc_service()
{
    command="$1"
    service="$2"

    case "$command" in
        "start" | "stop" | "restart" | "reload" | "force-reload" | "try-restart" | "status")
        	;;
        *)
            printf "[!] Error: Unsupported command: '$command'.\n"
            return 1
            ;;
    esac

    func_name="${command//-/_}_rc_service"
    "$func_name" "$service"
}

_run_sv()
{
    action="$1"
    service="$2"

    sv "$action" "$service" >/dev/null 2>&1 && {
        printf "[*] Success!\n";
        return 0;
    } || {
        printf "[!] Error: 'sv $action $service' failed.\n";
        return 1;
    }
}

status_sv()           { _run_sv "status"           "$1"; }
up_sv()               { _run_sv "up"               "$1"; }
down_sv()             { _run_sv "down"             "$1"; }
once_sv()             { _run_sv "once"             "$1"; }
pause_sv()            { _run_sv "pause"            "$1"; }
cont_sv()             { _run_sv "cont"             "$1"; }
hup_sv()              { _run_sv "hup"              "$1"; }
alarm_sv()            { _run_sv "alarm"            "$1"; }
interrupt_sv()        { _run_sv "interrupt"        "$1"; }
quit_sv()             { _run_sv "quit"             "$1"; }
one_sv()              { _run_sv "1"                "$1"; }
two_sv()              { _run_sv "2"                "$1"; }
term_sv()             { _run_sv "term"             "$1"; }
kill_sv()             { _run_sv "kill"             "$1"; }
exit_sv()             { _run_sv "exit"             "$1"; }
start_sv()            { _run_sv "start"            "$1"; }
stop_sv()             { _run_sv "stop"             "$1"; }
reload_sv()           { _run_sv "reload"           "$1"; }
restart_sv()          { _run_sv "restart"          "$1"; }
shutdown_sv()         { _run_sv "shutdown"         "$1"; }
force_stop_sv()       { _run_sv "force-stop"       "$1"; }
force_restart_sv()    { _run_sv "force-restart"    "$1"; }
force_shutdown_sv()   { _run_sv "force-shutdown"   "$1"; }
try_restart_sv()      { _run_sv "try-restart"      "$1"; }
check_sv()            { _run_sv "check"            "$1"; }

execute_sv()
{
    command="$1"
    service="$2"

    case "$command" in
        "status" | "up" | "down" | "once" | "pause" | "cont" | "hup" | "alarm" | "interrupt" | \
        "quit" | "1" | "2" | "term" | "kill" | "exit" | "start" | "stop" | "reload" | "restart" | \
        "shutdown" | "force-stop" | "force-restart" | "force-shutdown" | "try-restart" | "check")
        	;;
        *)
            printf "[!] Error: Unsupported command: '$command'.\n"
            return 1
            ;;
    esac

    func_name="${command//-/_}_sv"
    "$func_name" "$service"
}

_run_s6_rc()
{
    action="$1"
    service="$2"

    s6-rc "$action" "$service" >/dev/null 2>&1 && {
        printf "[*] Success!\n";
        return 0;
    } || {
        printf "[!] Error: 's6-rc $action $service' failed.\n";
        return 1;
    }
}

help_s6_rc()     { _run_s6_rc "help"     "$1"; }
list_s6_rc()     { _run_s6_rc "list"     "$1"; }
listall_s6_rc()  { _run_s6_rc "listall"  "$1"; }
diff_s6_rc()     { _run_s6_rc "diff"     "$1"; }
start_s6_rc()    { _run_s6_rc "start"    "$1"; }
stop_s6_rc()     { _run_s6_rc "stop"     "$1"; }
change_s6_rc()   { _run_s6_rc "change"   "$1"; }

execute_s6_rc()
{
    command="$1"
    service="$2"

    case "$command" in
    	"help" | "list" | "listall" | "diff" | "start" | "stop" | "change")
    		;;
        *)
            printf "[!] Error: Unsupported command: '$command'.\n"
            return 1
            ;;
    esac

    func_name="${command//-/_}_s6_rc"
    "$func_name" "$service"
}

_run_systemctl()
{
    action="$1"
    service="$2"

    systemctl "$action" "$service" >/dev/null 2>&1 && {
        printf "[*] Success!\n";
        return 0;
    } || { 
        printf "[!] Error: 'systemctl $action $service' failed.\n";
        return 1;
    }
}

add_requires_systemctl()           { _run_systemctl "add-requires"                 "$1"; }
add_wants_systemctl()              { _run_systemctl "add-wants"                    "$1"; }
bind_systemctl()                   { _run_systemctl "bind"                         "$1"; }
cancel_systemctl()                 { _run_systemctl "cancel"                       "$1"; }
cat_systemctl()                    { _run_systemctl "cat"                          "$1"; }
condreload_systemctl()             { _run_systemctl "condreload"                   "$1"; }
condrestart_systemctl()            { _run_systemctl "condrestart"                  "$1"; }
condstop_systemctl()               { _run_systemctl "condstop"                     "$1"; }
daemon_reexec_systemctl()          { _run_systemctl "daemon-reexec"                "$1"; }
daemon_reload_systemctl()          { _run_systemctl "daemon-reload"                "$1"; }
default_systemctl()                { _run_systemctl "default"                      "$1"; }
disable_systemctl()                { _run_systemctl "disable"                      "$1"; }
edit_systemctl()                   { _run_systemctl "edit"                         "$1"; }
emergency_systemctl()              { _run_systemctl "emergency"                    "$1"; }
enable_systemctl()                 { _run_systemctl "enable"                       "$1"; }
exit_systemctl()                   { _run_systemctl "exit"                         "$1"; }
force_reload_systemctl()           { _run_systemctl "force-reload"                 "$1"; }
get_default_systemctl()            { _run_systemctl "get-default"                  "$1"; }
halt_systemctl()                   { _run_systemctl "halt"                         "$1"; }
help_systemctl()                   { _run_systemctl "help"                         "$1"; }
hibernate_systemctl()              { _run_systemctl "hibernate"                    "$1"; }
hybrid_sleep_systemctl()           { _run_systemctl "hybrid-sleep"                 "$1"; }
import_environment_systemctl()     { _run_systemctl "import-environment"           "$1"; }
is_active_systemctl()              { _run_systemctl "is-active"                    "$1"; }
is_enabled_systemctl()             { _run_systemctl "is-enabled"                   "$1"; }
is_failed_systemctl()              { _run_systemctl "is-failed"                    "$1"; }
isolate_systemctl()                { _run_systemctl "isolate"                      "$1"; }
is_system_running_systemctl()      { _run_systemctl "is-system-running"            "$1"; }
kexec_systemctl()                  { _run_systemctl "kexec"                        "$1"; }
kill_systemctl()                   { _run_systemctl "kill"                         "$1"; }
link_systemctl()                   { _run_systemctl "link"                         "$1"; }
list_automounts_systemctl()        { _run_systemctl "list-automounts"              "$1"; }
list_dependencies_systemctl()      { _run_systemctl "list-dependencies"            "$1"; }
list_jobs_systemctl()              { _run_systemctl "list-jobs"                    "$1"; }
list_machines_systemctl()          { _run_systemctl "list-machines"                "$1"; }
list_sockets_systemctl()           { _run_systemctl "list-sockets"                 "$1"; }
list_timers_systemctl()            { _run_systemctl "list-timers"                  "$1"; }
list_unit_files_systemctl()        { _run_systemctl "list-unit-files"              "$1"; }
list_units_systemctl()             { _run_systemctl "list-units"                   "$1"; }
log_level_systemctl()              { _run_systemctl "log-level"                    "$1"; }
log_target_systemctl()             { _run_systemctl "log-target"                   "$1"; }
mask_systemctl()                   { _run_systemctl "mask"                         "$1"; }
mount_image_systemctl()            { _run_systemctl "mount-image"                  "$1"; }
poweroff_systemctl()               { _run_systemctl "poweroff"                     "$1"; }
preset_systemctl()                 { _run_systemctl "preset"                       "$1"; }
preset_all_systemctl()             { _run_systemctl "preset-all"                   "$1"; }
reboot_systemctl()                 { _run_systemctl "reboot"                       "$1"; }
reenable_systemctl()               { _run_systemctl "reenable"                     "$1"; }
reload_systemctl()                 { _run_systemctl "reload"                       "$1"; }
reload_or_restart_systemctl()      { _run_systemctl "reload-or-restart"            "$1"; }
rescue_systemctl()                 { _run_systemctl "rescue"                       "$1"; }
reset_failed_systemctl()           { _run_systemctl "reset-failed"                 "$1"; }
restart_systemctl()                { _run_systemctl "restart"                      "$1"; }
revert_systemctl()                 { _run_systemctl "revert"                       "$1"; }
service_log_level_systemctl()      { _run_systemctl "service-log-level"            "$1"; }
service_log_target_systemctl()     { _run_systemctl "service-log-target"           "$1"; }
service_watchdogs_systemctl()      { _run_systemctl "service-watchdogs"            "$1"; }
set_default_systemctl()            { _run_systemctl "set-default"                  "$1"; }
set_environment_systemctl()        { _run_systemctl "set-environment"              "$1"; }
property_systemctl()               { _run_systemctl "property"                     "$1"; }
show_systemctl()                   { _run_systemctl "show"                         "$1"; }
show_environment_systemctl()       { _run_systemctl "show-environment"             "$1"; }
start_systemctl()                  { _run_systemctl "start"                        "$1"; }
status_systemctl()                 { _run_systemctl "status"                       "$1"; }
stop_systemctl()                   { _run_systemctl "stop"                         "$1"; }
suspend_systemctl()                { _run_systemctl "suspend"                      "$1"; }
suspend_then_hibernate_systemctl() { _run_systemctl "suspend-then-hibernate"       "$1"; }
switch_root_systemctl()            { _run_systemctl "switch-root"                  "$1"; }
try_reload_or_restart_systemctl()  { _run_systemctl "try-reload-or-restart"        "$1"; }
try_restart_systemctl()            { _run_systemctl "try-restart"                  "$1"; }
unmask_systemctl()                 { _run_systemctl "unmask"                       "$1"; }
unset_environment_systemctl()      { _run_systemctl "unset-environment"            "$1"; }

execute_systemctl()
{
    command="$1"
    service="$2"

    case "$command" in
        "add-requires" | "add-wants" | "bind" | "cancel" | "cat" | "condreload" | "condrestart" | "condstop" | \
        "daemon-reexec" | "daemon-reload" | "default" | "disable" | "edit" | "emergency" | "enable" | "exit" | \
        "force-reload" | "get-default" | "halt" | "help" | "hibernate" | "hybrid-sleep" | "import-environment" | \
        "is-active" | "is-enabled" | "is-failed" | "isolate" | "is-system-running" | "kexec" | "kill" | "link" | \
        "list-automounts" | "list-dependencies" | "list-jobs" | "list-machines" | "list-sockets" | "list-timers" | \
        "list-unit-files" | "list-units" | "log-level" | "log-target" | "mask" | "mount-image" | "poweroff" | \
        "preset" | "preset-all" | "reboot" | "reenable" | "reload" | "reload-or-restart" | "rescue" | "reset-failed" | \
        "restart" | "revert" | "service-log-level" | "service-log-target" | "service-watchdogs" | "set-default" | \
        "set-environment" | "property" | "show" | "show-environment" | "start" | "status" | "stop" | "suspend" | \
        "suspend-then-hibernate" | "switch-root" | "try-reload-or-restart" | "try-restart" | "unmask" | "unset-environment")
        	;;
    	*)
        	printf "[!] Error: Unsupported command: '$command'.\n"
        	return 1
        	;;
    esac

    func_name="${command//-/_}_systemctl"
    "$func_name" "$service"
}

_run_service()
{
    action="$1"
    service="$2"

    service "$service" "$action" >/dev/null 2>&1 && {
        printf "[*] Success!\n";
        return 0;
    } || { 
        printf "[!] Error: 'service $service $action' failed.\n";
        return 1; 
    }
}

start_service()        { _run_service "start"        "$1"; }
stop_service()         { _run_service "stop"         "$1"; }
force_reload_service() { _run_service "force-reload" "$1"; }
restart_service()      { _run_service "restart"      "$1"; }
status_service()       { _run_service "status"       "$1"; }

execute_service()
{
    command="$1"
    service="$2"

    case "$command" in
        "start" | "stop" | "restart" | "force-reload" | "status")
        	;;
        *)
            printf "[!] Error: Unsupported command: '$command'.\n"
            return 1
            ;;
    esac

    func_name="${command//-/_}_service"
    "$func_name" "$service"
}

readonly SAFE_ARG_PATTERN="^[a-zA-Z0-9@._/:+=-]+$"

is_safe_argument()
{
    arg="$1"

    [[ "$arg" =~ $SAFE_ARG_PATTERN ]] && return 0 || return 1
}

validate_command()
{
    arg=

    (( $# == 0 )) && {
        printf "[!] Error: Empty command.\n";
        return 1;
    }

    for arg in "$@"; do
        ! is_safe_argument "$arg" && { 
            printf "[!] Error: Unsafe or invalid argument detected: '$arg'";
            return 1;
        }
    done

    return 0
}

execute()
{
    cmd=("$@")

    ! validate_command "${cmd[@]}" && return 1

    printf "[<==] Executing '${cmd[*]}'...\n"
    command "${cmd[@]}" && { 
        printf "[*] Success!\n";
        return 0; 
    } || {
        printf "[!] Error: Failed to execute: '${cmd[*]}'.\n";
        return 1;
    }
}

apk()            { execute apk             "$@"; }
apk_help()       { execute apk --help      "$@"; }
apk_add()        { execute apk add         "$@"; }
apk_del()        { execute apk del         "$@"; }
apk_fix()        { execute apk fix         "$@"; }
apk_update()     { execute apk update      "$@"; }
apk_upgrade()    { execute apk upgrade     "$@"; }
apk_cache()      { execute apk cache       "$@"; }
apk_info()       { execute apk info        "$@"; }
apk_list()       { execute apk list        "$@"; }
apk_dot()        { execute apk dot         "$@"; }
apk_policy()     { execute apk policy      "$@"; }
apk_search()     { execute apk search      "$@"; }
apk_index()      { execute apk index       "$@"; }
apk_fetch()      { execute apk fetch       "$@"; }
apk_manifest()   { execute apk manifest    "$@"; }
apk_verify()     { execute apk verify      "$@"; }
apk_audit()      { execute apk audit       "$@"; }
apk_stats()      { execute apk stats       "$@"; }
apk_version()    { execute apk version     "$@"; }

apt()                 { execute apt              "$@"; }
apt_autoclean()       { execute apt autoclean    "$@"; }
apt_autoremove()      { execute apt autoremove   "$@"; }
apt_changelog()       { execute apt changelog    "$@"; }
apt_depends()         { execute apt depends      "$@"; }
apt_download()        { execute apt download     "$@"; }
apt_full_upgrade()    { execute apt full-upgrade "$@"; }
apt_install()         { execute apt install      "$@"; }
apt_moo()             { execute apt moo          "$@"; }
apt_purge()           { execute apt purge        "$@"; }
apt_reinstall()       { execute apt reinstall    "$@"; }
apt_search()          { execute apt search       "$@"; }
apt_showsrc()         { execute apt showsrc      "$@"; }
apt_update()          { execute apt update       "$@"; }
apt_autopurge()       { execute apt autopurge    "$@"; }
apt_build_dep()       { execute apt build-dep    "$@"; }
apt_clean()           { execute apt clean        "$@"; }
apt_dist_upgrade()    { execute apt dist-upgrade "$@"; }
apt_edit_sources()    { execute apt edit-sources "$@"; }
apt_help()            { execute apt help         "$@"; }
apt_list()            { execute apt list         "$@"; }
apt_policy()          { execute apt policy       "$@"; }
apt_rdepends()        { execute apt rdepends     "$@"; }
apt_remove()          { execute apt remove       "$@"; }
apt_show()            { execute apt show         "$@"; }
apt_source()          { execute apt source       "$@"; }
apt_upgrade()         { execute apt upgrade      "$@"; }

apt_cache()           { execute apt-cache           "$@"; }
apt_cache_add()       { execute apt-cache add       "$@"; }
apt_cache_depends()   { execute apt-cache depends   "$@"; }
apt_cache_dotty()     { execute apt-cache dotty     "$@"; }
apt_cache_dump()      { execute apt-cache dump      "$@"; }
apt_cache_dumpavail() { execute apt-cache dumpavail "$@"; }
apt_cache_gencaches() { execute apt-cache gencaches "$@"; }
apt_cache_madison()   { execute apt-cache madison   "$@"; }
apt_cache_pkgnames()  { execute apt-cache pkgnames  "$@"; }
apt_cache_policy()    { execute apt-cache policy    "$@"; }
apt_cache_rdepends()  { execute apt-cache rdepends  "$@"; }
apt_cache_search()    { execute apt-cache search    "$@"; }
apt_cache_show()      { execute apt-cache show      "$@"; }
apt_cache_showpkg()   { execute apt-cache showpkg   "$@"; }
apt_cache_showsrc()   { execute apt-cache showsrc   "$@"; }
apt_cache_stats()     { execute apt-cache stats     "$@"; }
apt_cache_unmet()     { execute apt-cache unmet     "$@"; }
apt_cache_xvcg()      { execute apt-cache xvcg      "$@"; }

apt_cdrom()       { execute apt-cdrom       "$@"; }
apt_cdrom_add()   { execute apt-cdrom add   "$@"; }
apt_cdrom_ident() { execute apt-cdrom ident "$@"; }

apt_config()       { execute apt-config       "$@"; }
apt_config_shell() { execute apt-config shell "$@"; }
apt_config_dump()  { execute apt-dump dump    "$@"; }

apt_extracttemplates() { execute apt-extracttemplates "$@"; }

apt_get()                 { execute apt-get                 "$@"; }
apt_get_autoclean()       { execute apt-get autoclean       "$@"; }
apt_get_build_dep()       { execute apt-get build-dep       "$@"; }
apt_get_check()           { execute apt-get check           "$@"; }
apt_get_dist_upgrade()    { execute apt-get dist-upgrade    "$@"; }
apt_get_dselect_upgrade() { execute apt-get dselect-upgrade "$@"; }
apt_get_install()         { execute apt-get install         "$@"; }
apt_get_remove()          { execute apt-get remove          "$@"; }
apt_get_update()          { execute apt-get update          "$@"; }
apt_get_autoremove()      { execute apt-get autoremove      "$@"; }
apt_get_changelog()       { execute apt-get changelog       "$@"; }
apt_get_clean()           { execute apt-get clean           "$@"; }
apt_get_download()        { execute apt-get download        "$@"; }
apt_get_indextargets()    { execute apt-get indextargets    "$@"; }
apt_get_purge()           { execute apt-get purge           "$@"; }
apt_get_source()          { execute apt-get source          "$@"; }
apt_get_upgrade()         { execute apt-get upgrade         "$@"; }

apt_listchanges() { execute apt-listchanges "$@"; }

apt_mark()                 { execute apt-mark                 "$@"; }
apt_mark_auto()            { execute apt-mark auto            "$@"; }
apt_mark_manual()          { execute apt-mark manual          "$@"; }
apt_mark_minimize_manual() { execute apt-mark minimize-manual "$@"; }
apt_mark_showauto()        { execute apt-mark showauto        "$@"; }
apt_mark_showmanual()      { execute apt-mark showmanual      "$@"; }
apt_mark_hold()            { execute apt-mark hold            "$@"; }
apt_mark_unhold()          { execute apt-mark unhold          "$@"; }
apt_mark_showhold()        { execute apt-mark showhold        "$@"; }

apt_sortpkgs() { execute apt-sortpkgs "$@"; }

aptitude()                 { execute aptitude                 "$@"; }
aptitude_add_user_tag()    { execute aptitude add-user-tag    "$@"; }
aptitude_clean()           { execute aptitude clean           "$@"; }
aptitude_forget_new()      { execute aptitude forget-new      "$@"; }
aptitude_keep()            { execute aptitude keep            "$@"; }
aptitude_reinstall()       { execute aptitude reinstall       "$@"; }
aptitude_search()          { execute aptitude search          "$@"; }
aptitude_update()          { execute aptitude update          "$@"; }
aptitude_why_not()         { execute aptitude why-not         "$@"; }
aptitude_autoclean()       { execute aptitude autoclean       "$@"; }
aptitude_dist_upgrade()    { execute aptitude dist-upgrade    "$@"; }
aptitude_full_upgrade()    { execute aptitude full-upgrade    "$@"; }
aptitude_keep_all()        { execute aptitude keep-all        "$@"; }
aptitude_remove()          { execute aptitude remove          "$@"; }
aptitude_show()            { execute aptitude show            "$@"; }
aptitude_upgrade()         { execute aptitude upgrade         "$@"; }
aptitude_build_dep()       { execute aptitude build-dep       "$@"; }
aptitude_download()        { execute aptitude download        "$@"; }
aptitude_hold()            { execute aptitude hold            "$@"; }
aptitude_markauto()        { execute aptitude markauto        "$@"; }
aptitude_remove_user_tag() { execute aptitude remove-user-tag "$@"; }
aptitude_unhold()          { execute aptitude unhold          "$@"; }
aptitude_versions()        { execute aptitude versions        "$@"; }
aptitude_changelog()       { execute aptitude changelog       "$@"; }
aptitude_forbid_version()  { execute aptitude forbid_version  "$@"; }
aptitude_install()         { execute aptitude install         "$@"; }
aptitude_purge()           { execute aptitude purge           "$@"; }
aptitude_safe_upgrade()    { execute aptitude safe-upgrade    "$@"; }
aptitude_unmarkauto()      { execute aptitude unmarkauto      "$@"; }
aptitude_why()             { execute aptitude why             "$@"; }

aptitude_create_state_bundle()              { execute aptitude-create-state-bundle                   "$@"; }
aptitude_create_state_bundle_help()         { execute aptitude-create_state-bundle --help            "$@"; }
aptitude_create_state_bundle_print_inputs() { execute aptitude-create_state_bundle --print-inputs    "$@"; }
aptitude_create_state_bundle_force_bzip2()  { execute aptitude-create_state-bundle --force-bzip2     "$@"; }
aptitude_create_state_bundle_force_gzip()   { execute aptitude-create_state-bundle --force-gzip      "$@"; }

aptitude_run_state_bundle() { execute aptitude-run-state-bundle "$@"; }

dnf()                    { execute dnf                    "$@"; }
dnf_advisory()           { execute dnf advisory           "$@"; }
dnf_autoremove()         { execute dnf autoremove         "$@"; }
dnf_check()              { execute dnf check              "$@"; }
dnf_check_upgrade()      { execute dnf check-upgrade      "$@"; }
dnf_clean()              { execute dnf clean              "$@"; }
dnf_distro_sync()        { execute dnf distro-sync        "$@"; }
dnf_downgrade()          { execute dnf downgrade          "$@"; }
dnf_download()           { execute dnf download           "$@"; }
dnf_environment()        { execute dnf environment        "$@"; }
dnf_group()              { execute dnf group              "$@"; }
dnf_history()            { execute dnf history            "$@"; }
dnf_info()               { execute dnf info               "$@"; }
dnf_install()            { execute dnf install            "$@"; }
dnf_leaves()             { execute dnf leaves             "$@"; }
dnf_list()               { execute dnf list               "$@"; }
dnf_makecache()          { execute dnf makecache          "$@"; }
dnf_mark()               { execute dnf mark               "$@"; }
dnf_module()             { execute dnf module             "$@"; }
dnf_offline()            { execute dnf offline            "$@"; }
dnf_provides()           { execute dnf provides           "$@"; }
dnf_reinstall()          { execute dnf reinstall          "$@"; }
dnf_remove()             { execute dnf remove             "$@"; }
dnf_replay()             { execute dnf replay             "$@"; }
dnf_repo()               { execute dnf repo               "$@"; }
dnf_repoquery()          { execute dnf repoquery          "$@"; }
dnf_search()             { execute dnf search             "$@"; }
dnf_swap()               { execute dnf swap               "$@"; }
dnf_system_upgrade()     { execute dnf system-upgrade     "$@"; }
dnf_upgrade()            { execute dnf upgrade            "$@"; }
dnf_versionlock()        { execute dnf versionlock        "$@"; }
dnf_debuginfo_install()  { execute dnf debuginfo-install  "$@"; }
dnf_offline_distrosync() { execute dnf offline-distrosync "$@"; }
dnf_offline_upgrade()    { execute dnf offline-upgrade    "$@"; }
dnf_config_manager()     { execute dnf config-manager     "$@"; }
dnf_builddep()           { execute dnf builddep           "$@"; }
dnf_changelog()          { execute dnf changelog          "$@"; }
dnf_copr()               { execute dnf copr               "$@"; }
dnf_needs_restarting()   { execute dnf needs-restarting   "$@"; }
dnf_repoclosure()        { execute dnf repoclosure        "$@"; }
dnf_reposync()           { execute dnf reposync           "$@"; }

dpkg()                             { execute dpkg                               "$@"; }
dpkg_abort_after()                 { execute dpkg --abort-after                 "$@"; }
dpkg_add_architecture()            { execute dpkg --add-architecture            "$@"; }
dpkg_audit()                       { execute dpkg --audit                       "$@"; }
dpkg_auto_deconfigure()            { execute dpkg --auto-deconfigure            "$@"; }
dpkg_clear_avail()                 { execute dpkg --clear-avail                 "$@"; }
dpkg_clear_selection()             { execute dpkg --clear-selections            "$@"; }
dpkg_compare_versions()            { execute dpkg --compare-versions            "$@"; }
dpkg_configure()                   { execute dpkg --configure                   "$@"; }
dpkg_field()                       { execute dpkg --field                       "$@"; }
dpkg_forget_old_unavail()          { execute dpkg --forget-old-unavail          "$@"; }
dpkg_get_selections()              { execute dpkg --get-selections              "$@"; }
dpkg_help()                        { execute dpkg --help                        "$@"; }
dpkg_install()                     { execute dpkg --install                     "$@"; }
dpkg_list()                        { execute dpkg --list                        "$@"; }
dpkg_listfiles()                   { execute dpkg --listfiles                   "$@"; }
dpkg_merge_avail()                 { execute dpkg --merge-avail                 "$@"; }
dpkg_predep_package()              { execute dpkg --predep-package              "$@"; }
dpkg_print_architecture()          { execute dpkg --print-architecture          "$@"; }
dpkg_print_avail()                 { execute dpkg --print-avail                 "$@"; }
dpkg_print_foreign_architectures() { execute dpkg --print-foreign-architectures "$@"; }
dpkg_purge()                       { execute dpkg --purge                       "$@"; }
dpkg_record_avail()                { execute dpkg --record-avail                "$@"; }
dpkg_remove()                      { execute dpkg --remove                      "$@"; }
dpkg_remove_architecture()         { execute dpkg --remove-architecture         "$@"; }
dpkg_search()                      { execute dpkg --search                      "$@"; }
dpkg_set_selections()              { execute dpkg --set-selections              "$@"; }
dpkg_status()                      { execute dpkg --status                      "$@"; }
dpkg_unpack()                      { execute dpkg --unpack                      "$@"; }
dpkg_update_avail()                { execute dpkg --update-avail                "$@"; }
dpkg_verify()                      { execute dpkg --verify                      "$@"; }
dpkg_version()                     { execute dpkg --version                     "$@"; }

guix()                  { execute guix              "$@"; }
guix_archive()          { execute guix archive      "$@"; }
guix_build()            { execute guix build        "$@"; }
guix_challenge()        { execute guix challenge    "$@"; }
guix_container()        { execute guix container    "$@"; }
guix_copy()             { execute guix copy         "$@"; }
guix_deploy()           { execute guix deploy       "$@"; }
guix_describe()         { execute guix describe     "$@"; }
guix_download()         { execute guix download     "$@"; }
guix_edit()             { execute guix edit         "$@"; }
guix_environment()      { execute guix environment  "$@"; }
guix_gc()               { execute guix gc           "$@"; }
guix_git()              { execute guix git          "$@"; }
guix_graph()            { execute guix graph        "$@"; }
guix_hash()             { execute guix hash         "$@"; }
guix_help()             { execute guix --help       "$@"; }
guix_home()             { execute guix home         "$@"; }
guix_import()           { execute guix import       "$@"; }
guix_install()          { execute guix install      "$@"; }
guix_lint()             { execute guix lint         "$@"; }
guix_offload()          { execute guix offload      "$@"; }
guix_pack()             { execute guix pack         "$@"; }
guix_package()          { execute guix package      "$@"; }
guix_processes()        { execute guix processes    "$@"; }
guix_publish()          { execute guix publish      "$@"; }
guix_pull()             { execute guix pull         "$@"; }
guix_refresh()          { execute guix refresh      "$@"; }
guix_remove()           { execute guix remove       "$@"; }
guix_repl()             { execute guix repl         "$@"; }
guix_search()           { execute guix search       "$@"; }
guix_shell()            { execute guix shell        "$@"; }
guix_show()             { execute guix show         "$@"; }
guix_size()             { execute guix size         "$@"; }
guix_style()            { execute guix style        "$@"; }
guix_system()           { execute guix system       "$@"; }
guix_time_machine()     { execute guix time-machine "$@"; }
guix_upgrade()          { execute guix upgrade      "$@"; }
guix_weather()          { execute guix weather      "$@"; }

brew()                          { execute brew                  "$@"; }
brew_alias()                    { execute brew alias            "$@"; }
brew_analytics()                { execute brew analytics        "$@"; }
brew_autoremove()               { execute brew autoremove       "$@"; }
brew_bundle()                   { execute brew bundle           "$@"; }
brew_casks()                    { execute brew casks            "$@"; }
brew_cleanup()                  { execute brew cleanup          "$@"; }
brew_command()                  { execute brew command          "$@"; }
brew_commands()                 { execute brew commands         "$@"; }
brew_completions()              { execute brew completions      "$@"; }
brew_config()                   { execute brew config           "$@"; }
brew_deps()                     { execute brew deps             "$@"; }
brew_desc()                     { execute brew desc             "$@"; }
brew_developer()                { execute brew developer        "$@"; }
brew_docs()                     { execute brew docs             "$@"; }
brew_fetch()                    { execute brew fetch            "$@"; }
brew_formulae()                 { execute brew formulae         "$@"; }
brew_gist_logs()                { execute brew gist-logs        "$@"; }
brew_help()                     { execute brew help             "$@"; }
brew_home()                     { execute brew home             "$@"; }
brew_install()                  { execute brew install          "$@"; }
brew_leaves()                   { execute brew leaves           "$@"; }
brew_link()                     { execute brew link             "$@"; }
brew_list()                     { execute brew list             "$@"; }
brew_log()                      { execute brew log              "$@"; }
brew_mcp_server()               { execute brew mcp-server       "$@"; }
brew_migrate()                  { execute brew migrate          "$@"; }
brew_missing()                  { execute brew missing          "$@"; }
brew_nodenv_sync()              { execute brew nodenv-sync      "$@"; }
brew_options()                  { execute brew options          "$@"; }
brew_outdated()                 { execute brew outdated         "$@"; }
brew_pin()                      { execute brew pin              "$@"; }
brew_postinstall()              { execute brew postinstall      "$@"; }
brew_pyenv_sync()               { execute brew pyenv-sync       "$@"; }
brew_rbenv_sync()               { execute brew rbenv-sync       "$@"; }
brew_readall()                  { execute brew readall          "$@"; }
brew_reinstall()                { execute brew reinstall        "$@"; }
brew_search()                   { execute brew search           "$@"; }
brew_services()                 { execute brew services         "$@"; }
brew_setup_ruby()               { execute brew setup-ruby       "$@"; }
brew_shellenv()                 { execute brew shellenv         "$@"; }
brew_tab()                      { execute brew tab              "$@"; }
brew_tap()                      { execute brew tap              "$@"; }
brew_tap_info()                 { execute brew tap-info         "$@"; }
brew_unalias()                  { execute brew unalias          "$@"; }
brew_uninstall()                { execute brew uninstall        "$@"; }
brew_unlink()                   { execute brew unlink           "$@"; }
brew_unpin()                    { execute brew unpin            "$@"; }
brew_untap()                    { execute brew untap            "$@"; }
brew_update()                   { execute brew update           "$@"; }
brew_update_if_needed()         { execute brew update-if-needed "$@"; }
brew_update_reset()             { execute brew update-reset     "$@"; }
brew_upgrade()                  { execute brew upgrade          "$@"; }
brew_uses()                     { execute brew uses             "$@"; }
brew_cache()                    { execute brew --cache          "$@"; }
brew_caskroom()                 { execute brew --caskroom       "$@"; }
brew_cellar()                   { execute brew --cellar         "$@"; }
brew_env()                      { execute brew --env            "$@"; }
brew_prefix()                   { execute brew --prefix         "$@"; }
brew_repository()               { execute brew --repository     "$@"; }
brew_version()                  { execute brew --version        "$@"; }

pacman()            { execute pacman             "$@"; }
pacman_help()       { execute pacman --help      "$@"; }
pacman_version()    { execute pacman --version   "$@"; }
pacman_database()   { execute pacman --database  "$@"; }
pacman_files()      { execute pacman --files     "$@"; }
pacman_query()      { execute pacman --query     "$@"; }
pacman_remove()     { execute pacman --remove    "$@"; }
pacman_sync()       { execute pacman --sync      "$@"; }
pacman_deptest()    { execute pacman --deptest   "$@"; }
pacman_upgrade()    { execute pacman --upgrade   "$@"; }

pamac()              { execute pamac                  "$@"; }
pamac_version()      { execute pamac --version        "$@"; }
pamac_help()         { execute pamac --help           "$@"; }
pamac_search()       { execute pamac search           "$@"; }
pamac_list()         { execute pamac list             "$@"; }
pamac_info()         { execute pamac info             "$@"; }
pamac_install()      { execute pamac install          "$@"; }
pamac_reinstall()    { execute pamac reinstall        "$@"; }
pamac_remove()       { execute pamac remove           "$@"; }
pamac_checkupdates() { execute pamac checkupdates     "$@"; }
pamac_upgrade()      { execute pamac upgrade          "$@"; }
pamac_update()       { execute pamac update           "$@"; }
pamac_clone()        { execute pamac clone            "$@"; }
pamac_build()        { execute pamac build            "$@"; }
pamac_clean()        { execute pamac clean            "$@"; }

pkg()                     { execute pkg                  "$@"; }
freebsd_pkg_add()         { execute pkg add              "$@"; }
pkg_alias()               { execute pkg alias            "$@"; }
pkg_all_depends()         { execute pkg all-depends      "$@"; }
pkg_annotate()            { execute pkg annotate         "$@"; }
pkg_annotations()         { execute pkg annotations      "$@"; }
pkg_audit()               { execute pkg audit            "$@"; }
pkg_autoremove()          { execute pkg autoremove       "$@"; }
pkg_backup()              { execute pkg backup           "$@"; }
pkg_bootstrap()           { execute pkg bootstrap        "$@"; }
pkg_build_depends()       { execute pkg build-depends    "$@"; }
pkg_check()               { execute pkg check            "$@"; }
pkg_cinfo()               { execute pkg cinfo            "$@"; }
pkg_clean()               { execute pkg clean            "$@"; }
pkg_comment()             { execute pkg comment          "$@"; }
pkg_convert()             { execute pkg convert          "$@"; }
freebsd_pkg_create()      { execute pkg create           "$@"; }
pkg_csearch()             { execute pkg csearch          "$@"; }
freebsd_pkg_delete()      { execute pkg delete           "$@"; }
pkg_desc()                { execute pkg desc             "$@"; }
pkg_download()            { execute pkg download         "$@"; }
pkg_fetch()               { execute pkg fetch            "$@"; }
pkg_help()                { execute pkg help             "$@"; }
pkg_iinfo()               { execute pkg iinfo            "$@"; }
freebsd_pkg_info()        { execute pkg info             "$@"; }
pkg_install()             { execute pkg install          "$@"; }
pkg_isearch()             { execute pkg isearch          "$@"; }
pkg_leaf()                { execute pkg leaf             "$@"; }
pkg_list()                { execute pkg list             "$@"; }
pkg_lock()                { execute pkg lock             "$@"; }
pkg_noauto()              { execute pkg noauto           "$@"; }
pkg_options()             { execute pkg options          "$@"; }
pkg_origin()              { execute pkg options          "$@"; }
pkg_orphans()             { execute pkg orphans          "$@"; }
pkg_plugins()             { execute pkg plugins          "$@"; }
pkg_prime_list()          { execute pkg prime-list       "$@"; }
pkg_prime_origins()       { execute pkg prime-origins    "$@"; }
pkg_provided_depends()    { execute pkg provided-depends "$@"; }
pkg_query()               { execute pkg query            "$@"; }
pkg_rall_depends()        { execute pkg rall-depends     "$@"; }
pkg_raw()                 { execute pkg raw              "$@"; }
pkg_rcomment()            { execute pkg rcomment         "$@"; }
pkg_rdesc()               { execute pkg rdesc            "$@"; }
pkg_register()            { execute pkg register         "$@"; }
pkg_remove()              { execute pkg remove           "$@"; }
pkg_repo()                { execute pkg repo             "$@"; }
pkg_required_depends()    { execute pkg required-depends "$@"; }
pkg_roptions()            { execute pkg roptions         "$@"; }
pkg_rquery()              { execute pkg rquery           "$@"; }
pkg_runmaintained()       { execute pkg runmaintained    "$@"; }
pkg_search()              { execute pkg search           "$@"; }
pkg_set()                 { execute pkg set              "$@"; }
pkg_shared_depends()      { execute pkg shared-depends   "$@"; }
pkg_shell()               { execute pkg shell            "$@"; }
pkg_shlib()               { execute pkg shlib            "$@"; }
pkg_show()                { execute pkg show             "$@"; }
pkg_size()                { execute pkg size             "$@"; }
pkg_stats()               { execute pkg stats            "$@"; }
pkg_unlock()              { execute pkg unlock           "$@"; }
pkg_unmaintained()        { execute pkg unmaintained     "$@"; }
pkg_update()              { execute pkg update           "$@"; }
pkg_updating()            { execute pkg updating         "$@"; }
pkg_upgrade()             { execute pkg upgrade          "$@"; }
pkg_version()             { execute pkg version          "$@"; }
pkg_which()               { execute pkg which            "$@"; }

pkg_add() { execute pkg_add "$@"; }

pkg_create() { execute pkg_create "$@"; }

pkg_delete() { execute pkg_delete "$@"; }

pkg_info() { execute pkg_info "$@"; }

pkgin()                         { execute pkgin                     "$@"; }
pkgin_list()                    { execute pkgin list                "$@"; }
pkgin_avail()                   { execute pkgin avail               "$@"; }
pkgin_search()                  { execute pkgin search              "$@"; }
pkgin_install()                 { execute pkgin install             "$@"; }
pkgin_update()                  { execute pkgin update              "$@"; }
pkgin_upgrade()                 { execute pkgin upgrade             "$@"; }
pkgin_full_upgrade()            { execute pkgin full-upgrade        "$@"; }
pkgin_remove()                  { execute pkgin remove              "$@"; }
pkgin_keep()                    { execute pkgin keep                "$@"; }
pkgin_unkeep()                  { execute pkgin unkeep              "$@"; }
pkgin_export()                  { execute pkgin export              "$@"; }
pkgin_import()                  { execute pkgin import              "$@"; }
pkgin_show_keep()               { execute pkgin show-keep           "$@"; }
pkgin_show_no_keep()            { execute pkgin show-no-keep        "$@"; }
pkgin_autoremove()              { execute pkgin autoremove          "$@"; }
pkgin_clean()                   { execute pkgin clean               "$@"; }
pkgin_show_deps()               { execute pkgin show-deps           "$@"; }
pkgin_show_full_deps()          { execute pkgin show-full-deps      "$@"; }
pkgin_show_rev_deps()           { execute pkgin show-rev-deps       "$@"; }
pkgin_provides()                { execute pkgin provides            "$@"; }
pkgin_requires()                { execute pkgin requires            "$@"; }
pkgin_show_category()           { execute pkgin show-category       "$@"; }
pkgin_show_pkg_category()       { execute pkgin show-pkg-category   "$@"; }
pkgin_show_all_categories()     { execute pkgin show-all-categories "$@"; }
pkgin_pkg_content()             { execute pkgin pkg-content         "$@"; }
pkgin_pkg_descr()               { execute pkgin pkg-descr           "$@"; }
pkgin_pkg_build_defs()          { execute pkgin pkg-build-defs      "$@"; }
pkgin_stats()                   { execute pkgin stats               "$@"; }

emerge()                        { execute emerge                    "$@"; }

qi()          { execute qi 		   "$@"; }
qi_warn()     { execute qi warn    "$@"; }
qi_install()  { execute qi install "$@"; }
qi_remove()   { execute qi remove  "$@"; }
qi_upgrade()  { execute qi upgrade "$@"; }
qi_extract()  { execute qi extract "$@"; }
qi_create()   { execute qi create  "$@"; }
qi_build()    { execute qi build   "$@"; }
qi_order()    { execute qi order   "$@"; }

slackpkg()                     { execute slackpkg               "$@"; }
slackpkg_search()              { execute slackpkg search        "$@"; }
slackpkg_install()             { execute slackpkg install       "$@"; }
slackpkg_upgrade()             { execute slackpkg upgrade       "$@"; }
slackpkg_reinstall()           { execute slackpkg reinstall     "$@"; }
slackpkg_remove()              { execute slackpkg remove        "$@"; }
slackpkg_blacklist()           { execute slackpkg blacklist     "$@"; }
slackpkg_download()            { execute slackpkg download      "$@"; }
slackpkg_info()                { execute slackpkg info          "$@"; }
slackpkg_clean_system()        { execute slackpkg clean-system  "$@"; }
slackpkg_upgrade_all()         { execute slackpkg upgrade-all   "$@"; }
slackpkg_install_new()         { execute slackpkg install-new   "$@"; }
slackpkg_check_updates()       { execute slackpkg check-updates "$@"; }
slackpkg_update()              { execute slackpkg update        "$@"; }

trizen()          { execute trizen             "$@"; }
trizen_sync()     { execute trizen --sync      "$@"; }
trizen_comments() { execute trizen --comments  "$@"; }
trizen_get()      { execute trizen --get       "$@"; }
trizen_remove()   { execute trizen --remove    "$@"; }
trizen_query()    { execute trizen --query     "$@"; }
trizen_files()    { execute trizen --files     "$@"; }
trizen_database() { execute trizen --database  "$@"; }
trizen_deptest()  { execute trizen --deptest   "$@"; }
trizen_upgrade()  { execute trizen --upgrade   "$@"; }

xbps_install() { execute xbps-install "$@"; }

xbps_query()                  { execute xbps-query                    "$@"; }
xbps_query_list_pkgs()        { execute xbps-query --list-pkgs        "$@"; }
xbps_query_list_hold_pkgs()   { execute xbps-query --list-hold-pkgs   "$@"; }
xbps_query_list_repos()       { execute xbps-query --list-repos       "$@"; }
xbps_query_list_manual_pkgs() { execute xbps-query --list-manual-pkgs "$@"; }
xbps_query_list_orphans()     { execute xbps-query --list-orphans     "$@"; }
xbps_query_ownedby()          { execute xbps-query --ownedby          "$@"; }
xbps_query_show()             { execute xbps-query --show             "$@"; }
xbps_query_search()           { execute xbps-query --search           "$@"; }
xbps_query_files()            { execute xbps-query --files            "$@"; }
xbps_query_deps()             { execute xbps-query --deps             "$@"; }
xbps_query_revdeps()          { execute xbps-query --revdeps          "$@"; }
xbps_query_cat()              { execute xbps-query cat                "$@"; }

xbps_remove() { execute xbps-remove "$@"; }

yay()             { execute yay                   "$@"; }
yay_build()       { execute yay --build           "$@"; }
yay_show()        { execute yay --show            "$@"; }
yay_getpkgbuild() { execute yay --getpkgbuild     "$@"; }
yay_web()         { execute yay --web             "$@"; }

yum()                    { execute yum                    "$@"; }
yum_advisory()           { execute yum advisory           "$@"; }
yum_autoremove()         { execute yum autoremove         "$@"; }
yum_check()              { execute yum check              "$@"; }
yum_check_upgrade()      { execute yum check-upgrade      "$@"; }
yum_clean()              { execute yum clean              "$@"; }
yum_distro_sync()        { execute yum distro-sync        "$@"; }
yum_downgrade()          { execute yum downgrade          "$@"; }
yum_download()           { execute yum download           "$@"; }
yum_environment()        { execute yum environment        "$@"; }
yum_group()              { execute yum group              "$@"; }
yum_history()            { execute yum history            "$@"; }
yum_info()               { execute yum info               "$@"; }
yum_install()            { execute yum install            "$@"; }
yum_leaves()             { execute yum leaves             "$@"; }
yum_list()               { execute yum list               "$@"; }
yum_makecache()          { execute yum makecache          "$@"; }
yum_mark()               { execute yum mark               "$@"; }
yum_module()             { execute yum module             "$@"; }
yum_offline()            { execute yum offline            "$@"; }
yum_provides()           { execute yum provides           "$@"; }
yum_reinstall()          { execute yum reinstall          "$@"; }
yum_remove()             { execute yum remove             "$@"; }
yum_replay()             { execute yum replay             "$@"; }
yum_repo()               { execute yum repo               "$@"; }
yum_repoquery()          { execute yum repoquery          "$@"; }
yum_search()             { execute yum search             "$@"; }
yum_swap()               { execute yum swap               "$@"; }
yum_system_upgrade()     { execute yum system-upgrade     "$@"; }
yum_upgrade()            { execute yum upgrade            "$@"; }
yum_versionlock()        { execute yum versionlock        "$@"; }
yum_debuginfo_install()  { execute yum debuginfo-install  "$@"; }
yum_offline_distrosync() { execute yum offline-distrosync "$@"; }
yum_offline_upgrade()    { execute yum offline-upgrade    "$@"; }
yum_config_manager()     { execute yum config-manager     "$@"; }
yum_builddep()           { execute yum builddep           "$@"; }
yum_changelog()          { execute yum changelog          "$@"; }
yum_copr()               { execute yum copr               "$@"; }
yum_needs_restarting()   { execute yum needs-restarting   "$@"; }
yum_repoclosure()        { execute yum repoclosure        "$@"; }
yum_reposync()           { execute yum reposync           "$@"; }

zypper()                             { execute zypper                        "$@"; }
zypper_addlocale()                   { execute zypper addlocale              "$@"; }
zypper_addlock()                     { execute zypper addlock                "$@"; }
zypper_addrepo()                     { execute zypper addrepo                "$@"; }
zypper_addservice()                  { execute zypper addservice             "$@"; }
zypper_appsteam_cache()              { execute zypper appstream-cache        "$@"; }
zypper_clean()                       { execute zypper clean                  "$@"; }
zypper_cleanlocks()                  { execute zypper cleanlocks             "$@"; }
zypper_dist_upgrade()                { execute zypper dist-upgrade           "$@"; }
zypper_download()                    { execute zypper download               "$@"; }
zypper_help()                        { execute zypper help                   "$@"; }
zypper_info()                        { execute zypper info                   "$@"; }
zypper_install()                     { execute zypper install                "$@"; }
zypper_install_new_recommends()      { execute zypper install-new-recommends "$@"; }
zypper_licenses()                    { execute zypper licenses               "$@"; }
zypper_list_patches()                { execute zypper list-patches           "$@"; }
zypper_list_updates()                { execute zypper list-updates           "$@"; }
zypper_locales()                     { execute zypper locales                "$@"; }
zypper_locks()                       { execute zypper locks                  "$@"; }
zypper_modifyrepo()                  { execute zypper modifyrepo             "$@"; }
zypper_modifyservice()               { execute zypper modifyservice          "$@"; }
zypper_needs_rebooting()             { execute zypper needs-rebooting        "$@"; }
zypper_packages()                    { execute zypper packages               "$@"; }
zypper_patch()                       { execute zypper patch                  "$@"; }
zypper_patch_check()                 { execute zypper patch-check            "$@"; }
zypper_patches()                     { execute zypper patches                "$@"; }
zypper_patch_info()                  { execute zypper patch-info             "$@"; }
zypper_patterns()                    { execute zypper patterns               "$@"; }
zypper_product_info()                { execute zypper product-info           "$@"; }
zypper_products()                    { execute zypper products               "$@"; }
zypper_purge_kernels()               { execute zypper purge-kernels          "$@"; }
zypper_ps()                          { execute zypper ps                     "$@"; }
zypper_refresh()                     { execute zypper refresh                "$@"; }
zypper_refresh_services()            { execute zypper refresh-services       "$@"; }
zypper_remove()                      { execute zypper remove                 "$@"; }
zypper_removelocale()                { execute zypper removelocale           "$@"; }
zypper_removelock()                  { execute zypper removelock             "$@"; }
zypper_removeptf()                   { execute zypper removeptf              "$@"; }
zypper_removerepo()                  { execute zypper removerepo             "$@"; }
zypper_removeservice()               { execute zypper removeservice          "$@"; }
zypper_renamerepo()                  { execute zypper renamerepo             "$@"; }
zypper_repos()                       { execute zypper repos                  "$@"; }
zypper_search()                      { execute zypper search                 "$@"; }
zypper_services()                    { execute zypper services               "$@"; }
zypper_shell()                       { execute zypper shell                  "$@"; }
zypper_source_download()             { execute zypper source-download        "$@"; }
zypper_source_install()              { execute zypper source-install         "$@"; }
zypper_subcommand()                  { execute zypper subcommand             "$@"; }
zypper_system_architecture()         { execute zypper system-architecture    "$@"; }
zypper_targetos()                    { execute zypper targetos               "$@"; }
zypper_update()                      { execute zypper update                 "$@"; }
zypper_versioncmp()                  { execute zypper versioncmp             "$@"; }
zypper_verify()                      { execute zypper verify                 "$@"; }
zypper_what_provides()               { execute zypper what-provides          "$@"; }

zypper_log()                         { execute zypper-log "$@"; }

main()
{
    cmd="$1"
    
    [ $# -gt 0 ] && shift
	[ -z "$cmd" ] && return

    case "$cmd" in
        "h" | "-h" | "--help")
        	printf "==== Archetypum TheUnixManager ====\n"
            printf "[*] Usage: tum <command> [arguments]\n\n"
            printf "[...] Options:\n"
            printf "  h, -h, --help       Show this help message.\n"
            printf "  c, -c, --commands   List all available commands.\n"
            printf "  v, -v, --version    Show tum version.\n\n"
            printf "Check 'man tum' for more info.\n"
            exit 0
            ;;
        "c" | "-c" | "--commands")
            printf "[...] Available commands:\n"
            declare -F | awk '{print "  - " $3}' | grep -v '^main$' | sort
            exit 0
            ;;
        "v" | "-v" | "--version")
            printf "$VERSION\n"
        	exit 0
        	;;
        *)
            declare -F -- "$cmd" > /dev/null && {
                "$cmd" "$@"
            } || { 
                printf "[!] Error invoking '$cmd' or unknown command '$cmd'.\nCheck '--help'.\n";
                exit 1;
            }
            ;;
    esac
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
